function e(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function t(e){return null!==e&&"object"==typeof e&&!1===Array.isArray(e)}function o(t){var o=t.optionConfig,i=t.userOptions,r=void 0===i?{}:i,n=t.preffix,a=void 0===n?"":n,f=t.suffix,u=void 0===f?"":f,d=t.strict,p=void 0===d||d,c=function(e){return[a,e,u].join(" ")},s={};for(var l in o)if(e(o,l)){var g=o[l],v=g.required,y=g.default,b=g.description,h=g.validator,q=r[l],x=!!e(g,"required")&&("function"==typeof v?v(r):v),w=e(r,l),C=h(q,r);if(x){if(!w)throw new TypeError(c(l+" is required."));if(!C)throw new TypeError(c("Expected "+l+" to be "+b+", got "+typeof q+" "+q+"."));s[l]=q}else if(s[l]=y,w)if(C)s[l]=q;else{if(p)throw new TypeError(c("Expected "+l+" to be "+b+", got "+typeof q+" "+q+"."));console.warn(c("Expected "+l+" to be "+b+", got "+typeof q+" "+q+". Fallback to default value "+y+"."))}}return s}var i="[mergeOptions]:",r="\nCheck out documentation https://github.com/dubaua/merge-options#parameters-and-return";function n(e){throw new TypeError([i,e,r].join(" "))}var a={optionConfig:{required:!0,validator:function(o){for(var i in o)if(e(o,i)){var r=o[i];if(t(r)||n("Expected optionConfig."+i+" to be an object with declarative option configuration, got "+typeof r+" "+r+"."),e(r,"required")){var a=r.required,f=typeof a;"boolean"!==f&&"function"!==f&&n("Expected optionConfig."+i+".required to be either boolean or function, got "+typeof a+" "+a+".")}else e(r,"default")||n("Expected optionConfig."+i+" to either have required or default value.");if(e(r,"default")||e(r,"required")||n("Expected optionConfig."+i+" to either have required or default value."),e(r,"description")){var u=r.description;"string"!=typeof r.description&&n("Expected optionConfig."+i+".description to be a string, got "+typeof u+" "+u+".")}else n("Missing description on optionConfig."+i+" config.");if(e(r,"validator")){var d=r.validator;"function"!=typeof r.validator&&n("Expected optionConfig."+i+".validator to be a function, got "+typeof d+" "+d+".")}else n("Missing validator on optionConfig."+i+" config.")}return t(o)},description:"an object with declarative option configuration"},userOptions:{required:!1,default:{},validator:t,description:"an object"},preffix:{required:!1,default:"",validator:function(e){return"string"==typeof e},description:"a string"},suffix:{required:!1,default:"",validator:function(e){return"string"==typeof e},description:"a string"},strict:{required:!1,default:!0,validator:function(e){return"boolean"==typeof e},description:"a boolean"}};const f={count:{required:!0,validator:e=>"number"==typeof e&&isFinite(e),description:"a finite number"},one:{required:!0,validator:e=>"string"==typeof e,description:"a string"},few:{required:!0,validator:e=>"string"==typeof e,description:"a string"},many:{required:!0,validator:e=>"string"==typeof e,description:"a string"}};export default function(e){const t=function(e){var t=o({optionConfig:a,userOptions:e,preffix:i,suffix:r});return o(t)}({optionConfig:f,userOptions:e,preffix:"[getDeclension]:",suffix:"\nCheck out documentation https://github.com/dubaua/get-declension"}),{count:n,one:u,few:d,many:p}=t;let c=p;if(Math.round(n)!==n)c=d;else{const e=Math.abs(n%10),t=Math.abs(n%100);1===e&&11!==t?c=u:2<=e&&e<=4&&(t<10||20<=t)&&(c=d)}return`${n} ${c}`}
//# sourceMappingURL=get-declension.min.modern.js.map
